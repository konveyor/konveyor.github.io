<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Konveyor</title><link>http://konveyor.io/</link><description>Recent content on Konveyor</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 01 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="http://konveyor.io/index.xml" rel="self" type="application/rss+xml"/><item><title>1. Collect</title><link>http://konveyor.io/docs/move2kube/tutorials/cfappstok8/1collect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://konveyor.io/docs/move2kube/tutorials/cfappstok8/1collect/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> This is an optional step. If you are not familiar with Cloud Foundry or you do not want to collect information from the running app, skip to Customizing the output.&lt;/p>&lt;/blockquote>
&lt;p>To analyze the running application in Cloud Foundry (CF), the Move2Kube CLI tool provides a command called &lt;code>collect&lt;/code>. As the name suggests, it collects information about applications running in the cloud.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>For collecting information from a CF running instance, consider requiring &lt;code>cf&lt;/code> CLI for logging into Cloud Foundry. To target a specific Kubernetes cluster for the YAMLs, either &lt;code>oc&lt;/code> or &lt;code>kubectl&lt;/code> to collect information about the target cluster is necessary.&lt;/p></description></item><item><title>Concepts</title><link>http://konveyor.io/docs/move2kube/concepts/</link><pubDate>Tue, 16 Aug 2022 17:21:40 -0600</pubDate><guid>http://konveyor.io/docs/move2kube/concepts/</guid><description>&lt;p>Move2Kube has four concepts that are useful to understand when customizing output.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Important:&lt;/strong> It may be helpful to go through the tutorials first, then reading this section to learn more about each concept in more detail.&lt;/p>&lt;/blockquote>
&lt;h2 id="artifacts">Artifacts&lt;/h2>
&lt;p>&lt;a href="https://github.com/konveyor/move2kube/blob/6448624d79c37809417c05e34fcb3b2456952bcb/types/transformer/artifact.go#L37-L45">Source code&lt;/a>&lt;/p>
&lt;p>Artifacts represent the application objects that can be passed between transformers.&lt;/p>
&lt;pre tabindex="0">&lt;code>type Artifact struct {
	Name string `yaml:&amp;#34;name,omitempty&amp;#34; json:&amp;#34;name,omitempty&amp;#34;`
	Type ArtifactType `yaml:&amp;#34;type,omitempty&amp;#34; json:&amp;#34;type,omitempty&amp;#34;`
	ProcessWith metav1.LabelSelector `yaml:&amp;#34;processWith,omitempty&amp;#34; json:&amp;#34;processWith,omitempty&amp;#34;` // Selector for choosing transformers that should process this artifact, empty is everything

	Paths map[PathType][]string `yaml:&amp;#34;paths,omitempty&amp;#34; json:&amp;#34;paths,omitempty&amp;#34; m2kpath:&amp;#34;normal&amp;#34;`
	Configs map[ConfigType]interface{} `yaml:&amp;#34;configs,omitempty&amp;#34; json:&amp;#34;config,omitempty&amp;#34;` // Could be IR or template config or any custom configuration
}
&lt;/code>&lt;/pre>&lt;h3 id="artifact-fields">Artifact fields&lt;/h3>
&lt;p>Each artifact is an object with fields that need to be understood in order to write transformers effectively.&lt;/p></description></item><item><title>2. Plan</title><link>http://konveyor.io/docs/move2kube/tutorials/cfappstok8/2plan/</link><pubDate>Fri, 12 Aug 2022 12:08:16 -0600</pubDate><guid>http://konveyor.io/docs/move2kube/tutorials/cfappstok8/2plan/</guid><description>&lt;hr>
&lt;p>We start by planning the migration. During the plan phase, Move2Kube will analyze the files in the source directory, detect what services exist, create a plan on how to containerize them using Dockerfiles, and transform them into Kubernetes deployments, services, ingress, etc.&lt;/p>
&lt;p>In order to do the planning, Move2Kube has a large number of built-in transformers for different languages and platforms. Each transformer walks through the source directory from top to bottom and tries to find files that it recognizes. For example, a Golang transformer will try to find a &lt;code>go.mod&lt;/code> file to detect a Golang project. Once it detects a directory containing a service, it will try to extract as much information from it as possible. Some of the information it tries to find are the service name, ports, environment variables, etc.&lt;/p></description></item><item><title>3. Transform</title><link>http://konveyor.io/docs/move2kube/tutorials/cfappstok8/3transform/</link><pubDate>Fri, 12 Aug 2022 12:08:16 -0600</pubDate><guid>http://konveyor.io/docs/move2kube/tutorials/cfappstok8/3transform/</guid><description>&lt;p>Now run the transformation according to the plan file generated in the previous step. The transformation phase runs all of the transformers again, but this time the transformers will use the plan to generate the output files.&lt;/p>
&lt;p>During this process, the transformers might run into situations where it requires some more information to generate the output. In order to get this information, it will ask the user some questions. The questions range from yes/no, to multiple choice, to string input and most will have a default answer.&lt;/p></description></item><item><title>Using Move2Kube CLI</title><link>http://konveyor.io/docs/move2kube/tutorials/usingcli/</link><pubDate>Thu, 04 Aug 2022 19:09:57 -0600</pubDate><guid>http://konveyor.io/docs/move2kube/tutorials/usingcli/</guid><description>&lt;p>This tutorial shows how to transform a set of sample applications to run on Kubernetes using the Move2Kube CLI tool to generate the Kubernetes YAMLs, Dockerfiles, build scripts for each application, and then build the container images to deploy them to a cluster.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Install the Move2Kube CLI tool.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use the&lt;a href="https://github.com/konveyor/move2kube-demos/raw/main/samples/language-platforms">&lt;code>language-platforms&lt;/code>&lt;/a> sample directory which has a combination of multiple applications in different languages (Java, Go, Python, Ruby, etc.) that need to be containerized and deployed to Kubernetes.&lt;/p></description></item><item><title>Using Move2Kube UI</title><link>http://konveyor.io/docs/move2kube/tutorials/usingui/</link><pubDate>Thu, 04 Aug 2022 19:10:11 -0600</pubDate><guid>http://konveyor.io/docs/move2kube/tutorials/usingui/</guid><description>&lt;p>Similar to the command line tool, the Move2Kube Web-UI can also perform the transformation with all the capabilities that are in the command line tool. This document explains the steps to bring up the UI and backend using Docker and use it for transformation.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Install &lt;a href="https://www.docker.com/get-started">Docker&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use the &lt;a href="https://github.com/konveyor/move2kube-demos/raw/main/samples/language-platforms">language-platforms&lt;/a> sample. The language-platforms file has a combination of multiple applications in different languages (Java, Go, Python, Ruby, etc.) which need to be containerized and then put into Kubernetes.&lt;/p></description></item><item><title>From “Good Examples” to a Reusable Hint for App Modernization</title><link>http://konveyor.io/blog/2025/hints_generation/</link><pubDate>Tue, 01 Jul 2025 00:00:00 +0000</pubDate><guid>http://konveyor.io/blog/2025/hints_generation/</guid><description>&lt;p>&lt;strong>Author&lt;/strong>: &lt;a href="https://www.linkedin.com/in/savitharaghunathan">Savitha Raghunathan&lt;/a> (&lt;a href="https://github.com/savitharaghunathan">GitHub&lt;/a>)&lt;/p>
&lt;p>For the past several weeks, I’ve been running through a series of migration scenarios,everything from JMS-based Message-Driven Beans to Quarkus Reactive Messaging, JDK 8 apps to Java 17, and Spring Boot 2 services to Spring Boot 3 with Jakarta EE. Each scenario is its own mini experiment. I curated a handful of flawless before/after code pairs, extracted their AST diffs, crafted a focused LLM prompt, then used that to get hints.&lt;/p></description></item><item><title>Konveyor AI 0.1.0 is here!</title><link>http://konveyor.io/blog/2025/kai-release-announcement/</link><pubDate>Tue, 01 Apr 2025 00:00:00 +0000</pubDate><guid>http://konveyor.io/blog/2025/kai-release-announcement/</guid><description>&lt;p>&lt;strong>Author&lt;/strong>: &lt;a href="https://github.com/savitharaghunathan">Savitha Raghunathan&lt;/a>, &lt;a href="https://github.com/JonathanR19">Jonathan Recinos&lt;/a>&lt;/p>
&lt;p>After months of ideas, development, and feedback from early users and contributors, we&amp;rsquo;re excited to share the first official release of &lt;strong>&lt;a href="https://github.com/konveyor/editor-extensions/releases/tag/v0.1.0">Konveyor AI 0.1.0&lt;/a>&lt;/strong>.&lt;/p>
&lt;p>This release is a significant step forward for the Konveyor project, and for anyone working through the complex journey of application modernization. It marks the beginning of &lt;strong>developer-focused, AI-assisted modernization&lt;/strong> built with community input and open collaboration.&lt;/p>
&lt;h2 id="what-is-konveyor-ai">What is Konveyor AI?&lt;/h2>
&lt;p>&lt;strong>Konveyor AI (Kai)&lt;/strong> provides real-time insights to help developers and migrators identify and refactor deprecated or outdated code. As a developer modernizes an application with Kai, they&amp;rsquo;ll see detailed issues and their location, solutions with the reasoning for it, and code suggestions that can be automatically implemented.&lt;/p></description></item><item><title>Incident Storage in Kai - A Deep Dive</title><link>http://konveyor.io/blog/2024/kai-incident-storage-2024/</link><pubDate>Thu, 29 Aug 2024 00:00:00 +0000</pubDate><guid>http://konveyor.io/blog/2024/kai-incident-storage-2024/</guid><description>&lt;p>&lt;strong>Author&lt;/strong>: Jonah Sussman (&lt;a href="https://www.GitHub.com/jonahsussman/">GitHub&lt;/a>, &lt;a href="https://www.linkedin.com/in/jonahsussman/">LinkedIn&lt;/a>, &lt;a href="mailto:jsussman@redhat.com">E-mail&lt;/a>)&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>The process of modernizing an application is complex and time-consuming. Despite
our best efforts as software engineers with things like &lt;a href="https://semver.org/">semantic
versioning&lt;/a>, detailed release notes, and thorough testing,
modernizing a single application is an intimidating task.&lt;/p>
&lt;p>This kind of work is often one of the most unglamorous, and error-prone tasks
that developers have to do. It involves rewriting large portions of the
codebase, which can be daunting for even the most battle-hardened of developers.
There&amp;rsquo;s an interconnected web of functions, classes, and modules that all depend
on each other. One wrong move and the whole thing can come crashing down.&lt;/p></description></item><item><title>Konveyor AI (Kai) Roadmap 2024</title><link>http://konveyor.io/blog/2024/kai-roadmap-2024/</link><pubDate>Mon, 29 Jul 2024 07:00:00 +0000</pubDate><guid>http://konveyor.io/blog/2024/kai-roadmap-2024/</guid><description>&lt;p>&lt;strong>Author&lt;/strong>: &lt;a href="https://github.com/jwmatthews">John Matthews&lt;/a>&lt;/p>
&lt;p>This post shares the roadmap for &lt;a href="https://github.com/konveyor/kai">Konveyor AI (Kai)&lt;/a> as of summer 2024.
&lt;em>For a recap of what is Konveyor AI (Kai) please see our prior post: &lt;a href="http://konveyor.io/blog/kai-deep-dive-2024/">Kai - Generative AI Applied to Application Modernization&lt;/a>&lt;/em>&lt;/p>
&lt;p>The roadmap is organized by themes of functionality, each focusing on a specific aspect of the project&amp;rsquo;s development.&lt;/p>
&lt;p>Roadmap Outline:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#purpose">Purpose&lt;/a>&lt;/li>
&lt;li>&lt;a href="#maturity">Maturity&lt;/a>&lt;/li>
&lt;li>&lt;a href="#guiding-principles">Guiding Principles&lt;/a>&lt;/li>
&lt;li>&lt;a href="#themes">Themes&lt;/a>&lt;/li>
&lt;li>&lt;a href="#milestones">Milestones&lt;/a>&lt;/li>
&lt;li>&lt;a href="#future-areas-to-consider">Future Areas to Consider&lt;/a>&lt;/li>
&lt;li>&lt;a href="#access-to-early-builds">Access to Early Builds&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="purpose">Purpose&lt;/h2>
&lt;p>&lt;strong>What is the purpose of Konveyor AI?&lt;/strong>
Kai intends to improve the economics of re-platforming and refactoring applications to Kubernetes and cloud-native technologies via use of Generative AI leveraging data in Konveyor.&lt;/p></description></item><item><title>Kai - Generative AI Applied to Application Modernization</title><link>http://konveyor.io/blog/2024/kai-deep-dive-2024/</link><pubDate>Tue, 07 May 2024 07:00:00 +0000</pubDate><guid>http://konveyor.io/blog/2024/kai-deep-dive-2024/</guid><description>&lt;p>&lt;strong>Author&lt;/strong>: &lt;a href="https://github.com/jwmatthews">John Matthews&lt;/a>&lt;/p>
&lt;h3 id="overview">Overview&lt;/h3>
&lt;p>Konveyor AI or &amp;ldquo;Kai&amp;rdquo;, is an early effort of Generative AI applied to Application Modernization being explored under the Konveyor Ecosystem at &lt;a href="https://github.com/konveyor-ecosystem/kai">konveyor-ecosystem/kai&lt;/a>.&lt;/p>
&lt;p>Kai implements a &lt;a href="https://www.promptingguide.ai/techniques/rag">Retrieval Augmented Generation (RAG)&lt;/a> approach that leverages data from Konveyor to help generate code suggestions to aid migrating legacy code bases to a different technology. The intent of this RAG approach is to shape the code suggestions to be similar to how an organization has solved problems in the past, without additional fine-tuning of the model.&lt;/p></description></item><item><title>Konveyor at KubeCon + CloudNativeCon 2024 EU Paris</title><link>http://konveyor.io/blog/2024/konveyor-kiosk-at-kubecon-europe-2024/</link><pubDate>Tue, 12 Mar 2024 00:00:00 +0000</pubDate><guid>http://konveyor.io/blog/2024/konveyor-kiosk-at-kubecon-europe-2024/</guid><description>&lt;p>&lt;strong>Author&lt;/strong>: &lt;a href="https://github.com/savitharaghunathan">Savitha Raghunathan&lt;/a>&lt;/p>
&lt;p>If you&amp;rsquo;re planning to attend KubeCon + CloudNativeCon Europe we are eager to meet you!!
You&amp;rsquo;ll have multiple chances to engage with the Konveyor project and connect with other members of the Konveyor community.
This event provides an excellent opportunity to ask questions, interact with the Konveyor team in person, provide feedback, and build connections within the Konveyor community.
We are looking forward to meeting you there!&lt;/p>
&lt;h2 id="kubecon--cloudnativecon-project-pavilion">KubeCon + CloudNativeCon Project Pavilion&lt;/h2>
&lt;p>Be sure to visit our kiosk at PP3-A in the &lt;a href="https://events.linuxfoundation.org/kubecon-cloudnativecon-europe/program/project-engagement/#project-pavilion">project pavilion&lt;/a>
to learn more about Konveyor and pick up some cool swag and stickers!&lt;/p></description></item><item><title>State of Application Modernization Report 2024</title><link>http://konveyor.io/modernization-report/</link><pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate><guid>http://konveyor.io/modernization-report/</guid><description>&lt;p>Organizations take a variety of different approaches to modernizing their applications as they target improving security, reliability, and scalability. Relative to our last survey, two years ago, we’re seeing a greater emphasis on updating legacy applications and infrastructure over building new cloud applications.&lt;/p>
&lt;h2 id="about-the-survey">About the survey&lt;/h2>
&lt;p>Konveyor community member Red Hat partnered with research firm Illuminas to better understand how organizations plan to approach application modernization and migration—and what they consider success to look like. In all, 1,000 responses were gathered with half coming from the US and the balance split evenly between the United Kingdom (UK) and English-speaking Asia-Pacific (APAC). Half of the respondents were IT decision makers, a quarter were back-end developers, and a quarter software architects. Most respondents were large enterprises with more than 5,000 employees with the rest working for medium enterprises. A variety of industries including retail, software development, finance, and telecoms were represented.&lt;/p></description></item><item><title>Konveyor Kiosk at KubeCon + CloudNativeCon 2023 NA Chicago</title><link>http://konveyor.io/blog/2023/konveyor-kiosk-at-kubecon-north-america-2023/</link><pubDate>Fri, 03 Nov 2023 00:00:00 +0000</pubDate><guid>http://konveyor.io/blog/2023/konveyor-kiosk-at-kubecon-north-america-2023/</guid><description>&lt;p>&lt;strong>Author&lt;/strong>: &lt;a href="https://github.com/savitharaghunathan">Savitha Raghunathan&lt;/a>&lt;/p>
&lt;p>If you&amp;rsquo;re planning to attend KubeCon + CloudNativeCon North America, we are eager to meet you!! You&amp;rsquo;ll have multiple chances to engage with the Konveyor project and connect with other members of the Konveyor community. This event provides an excellent opportunity to ask questions, interact with the Konveyor team in person, provide feedback, and build connections within the Konveyor community. We are looking forward to meeting you there!&lt;/p></description></item><item><title>One Year in the CNCF Sandbox- Konveyor's Reflective Journey</title><link>http://konveyor.io/blog/2023/one-year-cncf-sandbox-konveyor-reflective-journey/</link><pubDate>Thu, 21 Sep 2023 00:00:00 +0000</pubDate><guid>http://konveyor.io/blog/2023/one-year-cncf-sandbox-konveyor-reflective-journey/</guid><description>&lt;p>&lt;strong>Author&lt;/strong>: &lt;a href="https://github.com/savitharaghunathan">Savitha Raghunathan&lt;/a>&lt;/p>
&lt;p>It has been an exceptional year for Konveyor since its admission into the CNCF in July 2022. Since then, the project has undergone a series of transformative changes and remarkable achievements, guided by a newly &lt;a href="https://github.com/konveyor/community/blob/main/Charter.md">updated charter&lt;/a> that has refocused Konveyor&amp;rsquo;s mission towards refactoring and replatforming legacy applications. In this post, we invite you to join us on a journey down memory lane as we celebrate the numerous milestones, both big and small, that our dedicated contributors have accomplished over the past year.&lt;/p></description></item><item><title>Contributing To Konveyor</title><link>http://konveyor.io/docs/konveyor/contributetokonveyor/</link><pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate><guid>http://konveyor.io/docs/konveyor/contributetokonveyor/</guid><description>&lt;h1 id="contributing-guide">Contributing Guide&lt;/h1>
&lt;p>Welcome! We are glad that you want to contribute to our project! 💖&lt;/p>
&lt;p>The project&amp;rsquo;s vision can be explored in detail in this enhancement: &lt;a href="https://github.com/konveyor/enhancements/tree/master/enhancements/unified_experience">Unified Experience&lt;/a>. Konveyor follows a collaborative and community-driven approach and the project encourages contributions from individuals and organizations alike. Konveyor&amp;rsquo;s &lt;a href="https://github.com/konveyor/community/blob/main/Charter.md">charter&lt;/a> outlines the project&amp;rsquo;s values, guidelines, and expectations for community members, making it easier for new contributors to get involved.&lt;/p>
&lt;p>As you get started, you are in the best position to give us feedback on areas of
our project that we need help with including:&lt;/p></description></item><item><title>Modernize Petclinic App to Kubernetes Using Konveyor</title><link>http://konveyor.io/blog/2023/modernize-petclinic-to-k8s-using-konveyor/</link><pubDate>Tue, 11 Jul 2023 00:00:00 +0000</pubDate><guid>http://konveyor.io/blog/2023/modernize-petclinic-to-k8s-using-konveyor/</guid><description>&lt;p>&lt;strong>Author&lt;/strong>: &lt;a href="https://github.com/savitharaghunathan">Savitha Raghunathan&lt;/a>&lt;/p>
&lt;p>Konveyor aims to surface insights on applications at scale to empower enterprise users to make better-informed decisions related to modernization activities. When it comes to migrating applications to Kubernetes (K8s), it&amp;rsquo;s important to note that some applications can be ported without any major issues. However, there are certain edge cases where applications may encounter difficulties during the migration process. One such edge case we will focus on in this tutorial involves Hazelcast. Hazelcast is an open-source in-memory data grid that provides distributed caching and data synchronization capabilities. In this tutorial, we will use Hazelcast as the session backing store. During the migration of an application utilizing Hazelcast, some issues arise due to the distributed nature of Hazelcast and the dynamic nature of a Kubernetes environment. In this specific case, network connectivity and discovery issues impact the functionality of the petclinic application.&lt;/p></description></item><item><title>Konveyor v0.2.1 Release Announcement</title><link>http://konveyor.io/blog/2023/release-announcement-0-2-1/</link><pubDate>Thu, 06 Jul 2023 00:00:00 +0000</pubDate><guid>http://konveyor.io/blog/2023/release-announcement-0-2-1/</guid><description>&lt;p>We are thrilled to announce the release of Konveyor 0.2.1! This release supports various features, like migration waves, integration with Jira, and other valuable minor updates.&lt;/p>
&lt;p>Key Highlights of Konveyor 0.2.1:&lt;/p>
&lt;ul>
&lt;li>Migration waves&lt;/li>
&lt;li>Jira Integration&lt;/li>
&lt;li>Minor improvements&lt;/li>
&lt;/ul>
&lt;h3 id="migration-waves">Migration Waves:&lt;/h3>
&lt;p>We are excited to introduce a significant addition to the Konveyor project, aimed at providing enhanced value throughout the migration process. We recognized the need to address the planning aspect required to scale the migration process across entire application portfolio. When dealing with a large-scale portfolio containing hundreds or even thousands of applications, it becomes impractical to execute the migration process in one go. To tackle this challenge, we have introduced the ability for Konveyor to define migration waves, allowing for an iterative and manageable approach. By breaking down the portfolio into waves, we enable a more sophisticated process that in the future we expect will automate the calculation of these waves based on various criteria. This feature empowers users to scale adoption efforts effectively, ensuring a seamless and efficient migration experience.&lt;/p></description></item><item><title>Reflecting on Large-Scale Cloud-Native Modernizations at KubeCon 23</title><link>http://konveyor.io/blog/2023/reflecting-on-large-scale-cloud-native-modernizations-at-kubecon-23/</link><pubDate>Fri, 26 May 2023 00:00:00 +0000</pubDate><guid>http://konveyor.io/blog/2023/reflecting-on-large-scale-cloud-native-modernizations-at-kubecon-23/</guid><description>&lt;p>Migrating large infrastructures from an on-premise, monolithic, traditional IT management approach
to a modern cloud-native Kubernetes-based ecosystem is a daunting task.
Christopher Nuland (Konveyor Ambassador) led a conversation with Jared Burk and Valentina Rodriguez Sosa, Red Hat; James Bench, Maximus
about the different migrations they have completed and the challenges they experienced.&lt;/p>
&lt;p>Chris and Valentina summarized the key 6 takeaways that combined questions from the audience
and a summary of the panel discussion held at the KubeCon 23 in AMSTERDAM.
&lt;img src="panel_blog.png" alt="Konveyor">&lt;/p></description></item><item><title>Community Update: Konveyor Refocuses Efforts on Replatforming and Refactoring Use Cases</title><link>http://konveyor.io/blog/2022/community-update-konveyor-refocuses-efforts/</link><pubDate>Thu, 20 Oct 2022 07:00:00 +0000</pubDate><guid>http://konveyor.io/blog/2022/community-update-konveyor-refocuses-efforts/</guid><description>&lt;p>In the latest &lt;a href="https://youtu.be/jyd3mpvVCC4">community update&lt;/a>, we revealed upcoming changes to the Konveyor Project. These adjustments are designed to solve the most important application modernizations problem better and to encourage participation with our community. Here’s what we announced:&lt;/p>
&lt;ul>
&lt;li>We will solely focus on solving for the replatforming and refactoring use cases.&lt;/li>
&lt;li>It’s easier to contribute and collaborate with Konveyor thanks to our new special interest group (SIG) model.&lt;/li>
&lt;li>You can learn the Konveyor project, see upcoming features, and give us feedback at our workshop — part of the OpenShift Commons Gathering at KubeCon NA 2022. &lt;a href="https://hopin.com/events/openshift-commons-gathering-2022-at-kubecon-na-detroit">Register for the Gathering&lt;/a> to secure your spot.&lt;/li>
&lt;li>Tackle 2.1 is available, future Tackle releases will be branded Konveyor.&lt;/li>
&lt;li>Konveyor roadmap includes migration wave management, multi language support, and integrations with modernization tools.&lt;/li>
&lt;/ul>
&lt;p>You can get the details of each announcement below.&lt;/p></description></item><item><title>Tackle 2.1 release</title><link>http://konveyor.io/blog/2022/tackle-2-1-release/</link><pubDate>Wed, 14 Sep 2022 07:00:00 +0000</pubDate><guid>http://konveyor.io/blog/2022/tackle-2-1-release/</guid><description>&lt;p>After the major milestone that &lt;a href="http://konveyor.io/blog/tackle-2-new-capabilities/">Tackle 2.0&lt;/a> represented, the community has continued gathering feedback from the field to further polish the feature set and provide value in the context of modernization, migration and adoption projects. This has led to Tackle 2.1, available now in &lt;a href="https://operatorhub.io/">operatorhub.io&lt;/a>, a minor release that has been focused on stabilizing the project and providing a more streamlined user experience, while still delivering some new tooling. The new features include the following:&lt;/p></description></item><item><title>Commands</title><link>http://konveyor.io/docs/move2kube/commands/</link><pubDate>Fri, 05 Aug 2022 11:13:15 -0600</pubDate><guid>http://konveyor.io/docs/move2kube/commands/</guid><description>&lt;p>Move2Kube creates all resources required for deploying applications into Kubernetes including containerization and Kubernetes resources. It supports translating from Docker swarm/Docker-compose, Cloud Foundry, and other non-containerized applications. If the application does not use any of those or is not containerized, it can still be transformed by Move2Kube.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> Use these commands to view the options available in Move2Kube.&lt;/p>&lt;/blockquote>
&lt;pre tabindex="0">&lt;code> -h, --help help for move2kube
 --log-file string File to store the logs in. By default it only prints to console.
 --log-level string Set logging levels. (default &amp;#34;info&amp;#34;)
&lt;/code>&lt;/pre>&lt;h3 id="move2kube-commands">Move2Kube commands&lt;/h3>
&lt;p>There are four phases of the Move2Kube processes that are created, configured, and run using four commands and their options:&lt;/p></description></item><item><title>Transformers</title><link>http://konveyor.io/docs/move2kube/transformers/</link><pubDate>Fri, 05 Aug 2022 10:42:32 -0600</pubDate><guid>http://konveyor.io/docs/move2kube/transformers/</guid><description>&lt;p>Move2Kube uses a suite of transformers to modify objects. To customize the output artifacts generated for a specific input, these transformers can be configured or new custom transformers can be created to achieve the required result. Transformer behavior and configuration is determined by the Transformer Class it uses. Though all the transformer classes are equal internally in Move2Kube, from a usage perspective, they are classified into three categories.&lt;/p>
&lt;ul>
&lt;li>Purpose Built - Has a specific job and the customization allows for changing the parameters/configuration required for performing the specific job. Ex: &lt;code>Kubernetes&lt;/code>, &lt;code>Parameterizer&lt;/code>, &lt;code>GolangDockerfileGenerator&lt;/code>, etc..&lt;/li>
&lt;li>External - Allows you to write custom transformers performing any behavior. It exposes the internal functions of the transformer class through different interfaces to be implemented by the transformer externally. Ex: &lt;code>Starlark&lt;/code>, &lt;code>Executable&lt;/code>&lt;/li>
&lt;li>Special - These classes allow special behaviors. Ex: &lt;code>Router&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="purpose-built">Purpose Built&lt;/h2>
&lt;p>These transformer classes do a specific job, and the customization allows for changing the parameters/configuration required for performing the specific job.&lt;/p></description></item><item><title>Konveyor is now a Cloud Native Computing Foundation (CNCF) Sandbox project</title><link>http://konveyor.io/blog/2022/konveyor-is-a-cncf-sandbox-project/</link><pubDate>Fri, 05 Aug 2022 07:00:00 +0000</pubDate><guid>http://konveyor.io/blog/2022/konveyor-is-a-cncf-sandbox-project/</guid><description>&lt;p>&lt;strong>Big news! Konveyor was recently accepted as a Cloud Native Computing Foundation (CNCF) Sandbox project 🎉&lt;/strong>&lt;/p>
&lt;h2 id="why-are-we-so-excited-about-this">Why are we so excited about this?&lt;/h2>
&lt;p>This is a huge milestone in our mission to accelerate the movement of applications to run on Kubernetes with an open-source approach. With the added credibility of our sandbox status, we can more easily attract and convince others to adopt and contribute to Konveyor. The result will be more effective open source tools that everyone can use to adopt Kubernetes and cloud-native technology faster!&lt;/p></description></item><item><title>Add custom files and directories in custom locations</title><link>http://konveyor.io/docs/move2kube/tutorials/customizeoutput/addcustfiledir/</link><pubDate>Thu, 04 Aug 2022 19:22:55 -0600</pubDate><guid>http://konveyor.io/docs/move2kube/tutorials/customizeoutput/addcustfiledir/</guid><description>&lt;p>Move2Kube allows custom template files to be added to any directory. This example illustrates this by adding a custom Helm chart.&lt;/p>
&lt;ol>
&lt;li>Start by creating an empty workspace directory named &lt;code>workspace&lt;/code> and make it the current working directory. Asume all commands are executed within this directory.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ mkdir workspace &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> cd workspace
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Use the &lt;a href="https://github.com/konveyor/move2kube-demos/tree/main/samples/enterprise-app">enterprise-app&lt;/a> as input for this flow.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ curl https://move2kube.konveyor.io/scripts/download.sh | bash -s -- -d samples/enterprise-app/src -r move2kube-demos 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ls src
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>README.md		config-utils		customers	docs			frontend		gateway			orders
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this project, all the apps have a pom.xml file. Use a custom transformer to place a Helm chart created from a template into each of those project directories.&lt;/p></description></item><item><title>Parameterizing custom fields in Helm Chart, Kustomize, OC templates</title><link>http://konveyor.io/docs/move2kube/tutorials/customizeoutput/paramcustomfieldshelm/</link><pubDate>Thu, 04 Aug 2022 19:22:25 -0600</pubDate><guid>http://konveyor.io/docs/move2kube/tutorials/customizeoutput/paramcustomfieldshelm/</guid><description>&lt;p>This tutorial illustrates how to parameterize a custom field in the Helm chart generated by Move2Kube.&lt;/p>
&lt;ol>
&lt;li>Start by creating an empty workspace directory named &lt;code>workspace&lt;/code> and make it the current working directory. Assume all commands are executed within this directory.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ mkdir workspace &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> cd workspace
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Use the &lt;a href="https://github.com/konveyor/move2kube-demos/tree/main/samples/enterprise-app">enterprise-app&lt;/a> as input for this flow.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ curl https://move2kube.konveyor.io/scripts/download.sh | bash -s -- -d samples/enterprise-app/src -r move2kube-demos
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ls src
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>README.md		config-utils		customers	docs			frontend		gateway			orders
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Run Move2Kube &lt;strong>without&lt;/strong> any customization. The relevant snippet from the deployment YAML generated in the path &lt;code>myproject/deploy/yamls-parameterized/helm-chart/myproject/templates/orders-deployment.yaml&lt;/code> is shown below.&lt;/li>
&lt;/ol>
&lt;p>When complete, delete the &lt;code>myproject&lt;/code> directory.&lt;/p></description></item><item><title>Add custom annotations to Kubernetes YAMLs</title><link>http://konveyor.io/docs/move2kube/tutorials/customizeoutput/customannotationsyaml/</link><pubDate>Thu, 04 Aug 2022 19:22:02 -0600</pubDate><guid>http://konveyor.io/docs/move2kube/tutorials/customizeoutput/customannotationsyaml/</guid><description>&lt;p>Move2Kube generates Kubernetes YAMLs based on the needs of the application, but there might be situations that might require specific fields to be different in the output. This example illustrates how to add an annotation to the Ingress YAML specifying an ingress class.&lt;/p>
&lt;ol>
&lt;li>Create an empty workspace directory named &lt;code>workspace&lt;/code> and make it the current working directory. Assume all commands are executed within this directory.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ mkdir workspace &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> cd workspace
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Use the &lt;a href="https://github.com/konveyor/move2kube-demos/tree/main/samples/enterprise-app">enterprise-app&lt;/a> as the input for this flow.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ curl https://move2kube.konveyor.io/scripts/download.sh | bash -s -- -d samples/enterprise-app/src -r move2kube-demos
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ls src
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>README.md		config-utils		customers	docs			frontend		gateway			orders
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Run Move2Kube &lt;strong>without&lt;/strong> any customization and the output ingress does not have any annotation. Once done, delete the &lt;code>myproject&lt;/code> directory.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ move2kube transform -s src/ --qa-skip &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> cat myproject/deploy/yamls/myproject-ingress.yaml &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> rm -rf myproject
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">networking.k8s.io/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Ingress&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">creationTimestamp&lt;/span>: &lt;span style="color:#66d9ef">null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">move2kube.konveyor.io/service&lt;/span>: &lt;span style="color:#ae81ff">myproject&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">myproject&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Get the Starlark based custom transformer &lt;a href="https://github.com/konveyor/move2kube-transformers/tree/main/add-custom-kubernetes-annotation">here&lt;/a> and copy it into the &lt;code>customizations&lt;/code> sub-directory.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ curl https://move2kube.konveyor.io/scripts/download.sh | bash -s -- -d add-custom-kubernetes-annotation -r move2kube-transformers -o customizations
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>Transform using this customization and specify it using the &lt;code>-c&lt;/code> flag.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ move2kube transform -s src/ -c customizations/ --qa-skip
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once the output is generated, note in the snippet of the ingress file (&lt;code>myproject/deploy/yamls/myproject-ingress.yaml&lt;/code>) that there is an annotation for the ingress class added (&lt;code>kubernetes.io/ingress.class: haproxy&lt;/code>):&lt;/p></description></item><item><title>Customize generated Dockerfile and built-in transformer behavior</title><link>http://konveyor.io/docs/move2kube/tutorials/customizeoutput/customgendockerfile/</link><pubDate>Thu, 04 Aug 2022 19:21:31 -0600</pubDate><guid>http://konveyor.io/docs/move2kube/tutorials/customizeoutput/customgendockerfile/</guid><description>&lt;p>In this tutorial, Move2Kube will add a custom Dockerfile, and a custom file.&lt;/p>
&lt;ol>
&lt;li>Create an empty workspace directory named &lt;code>workspace&lt;/code> and make it the current working directory. Assume all commands are executed within this directory.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ mkdir workspace &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> cd workspace
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Use the &lt;a href="https://github.com/konveyor/move2kube-demos/tree/main/samples/enterprise-app">enterprise-app&lt;/a> as input for this flow.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ curl https://move2kube.konveyor.io/scripts/download.sh | bash -s -- -d samples/enterprise-app/src -r move2kube-demos
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ls src
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>README.md		config-utils		customers	docs			frontend		gateway			orders
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Run Move2Kube &lt;strong>without&lt;/strong> any customization.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>If the &lt;code>Dockerfile&lt;/code> is generated for the &lt;code>frontend&lt;/code> app, it uses &lt;code>registry.access.redhat.com/ubi8/nodejs-12&lt;/code> as the base image.&lt;/li>
&lt;li>There are no scripts named &lt;code>start-nodejs.sh&lt;/code> in the &lt;code>frontend&lt;/code> service directory.&lt;/li>
&lt;li>The Kubernetes YAMLs are generated in &lt;code>myproject/deploy/yamls&lt;/code> directory.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ move2kube transform -s src/ --qa-skip &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> ls myproject/source/frontend &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> cat myproject/source/frontend/Dockerfile &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> ls myproject/deploy &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> rm -rf myproject
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Dockerfile		README.md		dr-surge.js		manifest.yml		package-lock.json	server.js		stories			test-setup.js		webpack.common.js	webpack.prod.js LICENSE		__mocks__		jest.config.js		nodemon.json		package.json		src			stylePaths.js		tsconfig.json		webpack.dev.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>FROM registry.access.redhat.com/ubi8/nodejs-12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>COPY . .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RUN npm install
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RUN npm run build
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>EXPOSE 8080
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CMD npm run start
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>cicd			compose			knative			knative-parameterized	yamls			yamls-parameterized
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The next steps will:&lt;/p></description></item><item><title>Customize Kubernetes YAMLs to target specific clusters</title><link>http://konveyor.io/docs/move2kube/tutorials/customkubeyaml/</link><pubDate>Thu, 04 Aug 2022 19:13:38 -0600</pubDate><guid>http://konveyor.io/docs/move2kube/tutorials/customkubeyaml/</guid><description>&lt;p>Move2Kube already supports targeting across multiple clusters including: Kubernetes, Openshift, IBM-IKS, IBM-Openshift, Azure-EKS, Azure-AKS and GCP-GKS. There might be situations that require generating Kubernetes YAMLs to target a particular cluster. This tutorial shows how to use Konveyor Move2Kube to change the versions of existing Kubernetes resources to target a particular cluster. Move2Kube can also be customized to generate Kubernetes YAMLS deployable on a particular cluster.&lt;/p>
&lt;p>&lt;strong>Prerequisites&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Install the Move2Kube CLI tool.&lt;/p></description></item><item><title>Create Helm-charts, Kustomize overlays from Kubernetes Yamls</title><link>http://konveyor.io/docs/move2kube/tutorials/createhelmchartskustomize/</link><pubDate>Thu, 04 Aug 2022 19:13:10 -0600</pubDate><guid>http://konveyor.io/docs/move2kube/tutorials/createhelmchartskustomize/</guid><description>&lt;p>This tutorial will show how to transform a set of Kubernetes YAMLs by parameterizing them by using Move2Kube to generate parameterized Helm charts, Kustomize and Openshift Templates from the Kubernetes YAMLs. Move2Kube can also change the version of Kubernetes resources to target particular clusters.&lt;/p>
&lt;p>&lt;strong>Prerequisites&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Move2Kube CLI tool is installed.&lt;/li>
&lt;li>Use a &lt;a href="https://github.com/konveyor/move2kube-demos/tree/main/samples/kubernetes-to-kubernetes">kubernetes-to-kubernetes&lt;/a> sample. The &lt;code>kubernetes-to-kubernetes&lt;/code> directory has some Kubernetes YAMLs that deploy a web app with multiple services. There are three services: a frontend website in PHP, a backend API in Node.JS, and a cache service using Redis.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Procedure&lt;/strong>&lt;/p></description></item><item><title>Create and deploy Windows .NET containers</title><link>http://konveyor.io/docs/move2kube/tutorials/createwincontainersnet/</link><pubDate>Thu, 04 Aug 2022 19:12:22 -0600</pubDate><guid>http://konveyor.io/docs/move2kube/tutorials/createwincontainersnet/</guid><description>&lt;h2 id="net-applications-in-4x-framework">.NET applications in 4.x framework&lt;/h2>
&lt;p>This tutorial shows how containerize .NET applications developed for 4.x versions of .NET framework using Windows containers and deploy them to Kubernetes cluster using Move2Kube. This tutorial uses the sample &lt;a href="https://docs.microsoft.com/en-us/dotnet/framework/wcf/whats-wcf">WCF&lt;/a> service from &lt;a href="https://github.com/konveyor/move2kube-demos/tree/main/samples/wcfservice">samples/wcfservice&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Install Move2Kube.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Configure Kubernetes with &lt;a href="https://kubernetes.io/docs/setup/production-environment/windows/user-guide-windows-containers/">windows node support&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Download the &lt;code>samples/wcfservice&lt;/code> sample from &lt;a href="https://github.com/konveyor/move2kube-demos">move2kube-demos&lt;/a> repository.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ curl https://move2kube.konveyor.io/scripts/download.sh | bash -s -- -d samples/wcfservice -r move2kube-demos
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span> $ tree -L 2 wcfservice/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wcfservice/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── wcfservice
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├── App.config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├── IWindowsSampleService.cs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├── Properties
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├── WindowsSampleService.cs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├── wcfservice.cs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ └── wcfservice.csproj
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── wcfservice.sln
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> 2 directories, 6 files
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="generating-target-artifacts">Generating target artifacts&lt;/h2>
&lt;p>This procedure uses a two stage process for the transformation: plan and &lt;em>transform&lt;/em>. Run these steps from the directory containing the &lt;code>./wcfservice/&lt;/code> directory:&lt;/p></description></item><item><title>Migrate and deploy .NET Core applications to Kubernetes</title><link>http://konveyor.io/docs/move2kube/tutorials/migratedeploynetcore/</link><pubDate>Thu, 04 Aug 2022 19:11:51 -0600</pubDate><guid>http://konveyor.io/docs/move2kube/tutorials/migratedeploynetcore/</guid><description>&lt;p>This tutorial shows how to migrate and deploy .NET Core applications to a Kubernetes cluster using the target artifacts generated by Move2Kube with the data from &lt;a href="https://github.com/konveyor/move2kube-demos/tree/main/samples/dotnet5">samples/dotnet5&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Install Move2Kube.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Install a container runtime: &lt;a href="https://www.docker.com/get-started">Docker&lt;/a> or &lt;a href="https://podman.io/getting-started/installation">Podman&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Install &lt;a href="https://kubernetes.io/docs/tasks/tools/install-kubectl">Kubectl&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Verify the dependencies were correctly installed.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ docker version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>or&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ podman info
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ kubectl version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Download the &lt;code>samples/dotnet5&lt;/code> sample from &lt;a href="https://github.com/konveyor/move2kube-demos">move2kube-demos&lt;/a> repository.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ curl https://move2kube.konveyor.io/scripts/download.sh | bash -s -- -d samples/dotnet5 -r move2kube-demos
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="6">
&lt;li>View the structure inside the &lt;code>./dotnet5&lt;/code> directory and the four different applications:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>&lt;code>dotnetwebapp&lt;/code> - an ASP.NET Core web application.&lt;/p></description></item><item><title>Migrate from Docker Compose to Kubernetes</title><link>http://konveyor.io/docs/move2kube/tutorials/migratedockercomposekube/</link><pubDate>Thu, 04 Aug 2022 19:11:24 -0600</pubDate><guid>http://konveyor.io/docs/move2kube/tutorials/migratedockercomposekube/</guid><description>&lt;p>Move2Kube automatically analyzes all the YAML files in the docker-compose directory and transforms and creates all artifacts required for deploying the application in Kubernetes using the &lt;code>transform&lt;/code> command.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ move2kube transform -s docker-compose
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ul>
&lt;li>Install the Move2Kube CLI tool.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> This tutorial has been created with &lt;code>v0.3.3-rc.2&lt;/code> version of Move2Kube.&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ MOVE2KUBE_TAG&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;v0.3.3-rc.2&amp;#39;&lt;/span> bash &amp;lt;&lt;span style="color:#f92672">(&lt;/span>curl https://raw.githubusercontent.com/konveyor/move2kube/main/scripts/install.sh&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Install a Kubernetes cluster from &lt;a href="https://minikube.sigs.k8s.io/docs/start/">MiniKube&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>This tutorial shows how to migrate an application written for Docker Compose to run on Kubernetes using the two &lt;a href="https://github.com/konveyor/move2kube-demos/tree/main/samples/docker-compose">Docker Compose&lt;/a> samples from the &lt;a href="https://github.com/konveyor/move2kube-demos">move2kube-demos&lt;/a> repo.&lt;/p></description></item><item><title>Migrate and deploy Cloud Foundry applications to Kubernetes</title><link>http://konveyor.io/docs/move2kube/tutorials/migratedeploycfapps/</link><pubDate>Thu, 04 Aug 2022 19:10:59 -0600</pubDate><guid>http://konveyor.io/docs/move2kube/tutorials/migratedeploycfapps/</guid><description>&lt;p>This tutorial shows how to install Move2Kube and use the Move2Kube process (collect, plan and transform) to create deployment artifacts for Cloud Foundry apps using the data from &lt;a href="https://github.com/konveyor/move2kube-demos/tree/main/samples/cloud-foundry">samples/cloud-foundry&lt;/a>.&lt;/p>
&lt;p>Using the &lt;code>transform&lt;/code> command, Move2Kube will automatically analyze all the artifacts in the cloud-foundry directory and transform and create all the artifacts required for deploying the application in Kubernetes.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ move2kube transform -s cloud-foundry
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ul>
&lt;li>A source directory containing the source code files and/or the manifest.yml file of a Cloud Foundry application.&lt;/li>
&lt;/ul>
&lt;p>A sample of this is present in the &lt;a href="https://github.com/konveyor/move2kube-demos">move2kube-demos&lt;/a> repository. This tutorial will be using the &lt;code>cloud-foundry&lt;/code> sample from this repository.&lt;/p></description></item><item><title>Run transforms non-interactively</title><link>http://konveyor.io/docs/move2kube/tutorials/runnoninteractively/</link><pubDate>Thu, 04 Aug 2022 19:10:32 -0600</pubDate><guid>http://konveyor.io/docs/move2kube/tutorials/runnoninteractively/</guid><description>&lt;p>Move2Kube interacts with users through a series of questions during the transformation phase. After looking at the output, re-running it and giving different answers to some of the questions may be necessary. In order to avoid answering all of the same questions over and over, Move2Kube provides a simple configuration file.&lt;/p>
&lt;p>In the directory where the &lt;code>move2kube transform&lt;/code> command was run there is a file called &lt;code>m2kconfig.yaml&lt;/code> which contains the answers provided to all of the questions that were asked. There is also a &lt;code>m2kqacache.yaml&lt;/code> file which contains both the questions and the answers in more detail and can be used when running the transform using the &lt;code>--config&lt;/code> flag&lt;/p></description></item><item><title>Web Interface</title><link>http://konveyor.io/docs/move2kube/installation/installweb/</link><pubDate>Wed, 03 Aug 2022 15:23:24 -0600</pubDate><guid>http://konveyor.io/docs/move2kube/installation/installweb/</guid><description>&lt;p>Minikube can be installed using Docker or Podman web interfaces.&lt;/p>
&lt;h2 id="installing-move2kube-using-docker">Installing Move2Kube using Docker&lt;/h2>
&lt;p>Follow the steps below to install Move2Kube with options of persistence by mounting to the current directory, and advanced features by mounting to the Docker socket allowing Move2Kube to run container based transformers.&lt;/p>
&lt;p>Move2Kube can also be installed as a Helm Chart from &lt;a href="https://artifacthub.io/packages/helm/move2kube/move2kube/0.3.0?modal=install">ArtifactHub&lt;/a>. For more information on Helm Chart and Operator see &lt;a href="https://github.com/konveyor/move2kube-operator">Move2Kube Operator&lt;/a>&lt;/p>
&lt;p>&lt;strong>Procedure&lt;/strong>
.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note&lt;/strong> For bleeding edge features, development, and testing, follow the steps below, but replace &lt;code>v0.3.0&lt;/code> with &lt;code>latest&lt;/code>.&lt;/p></description></item><item><title>Command line tool</title><link>http://konveyor.io/docs/move2kube/installation/installcli/</link><pubDate>Wed, 03 Aug 2022 15:23:12 -0600</pubDate><guid>http://konveyor.io/docs/move2kube/installation/installcli/</guid><description>&lt;h2 id="installing-on-linux--macos--windows-wsl-recommended">Installing on Linux / MacOS / Windows WSL (Recommended):&lt;/h2>
&lt;p>The easiest way to install Move2Kube is to download the pre-built binaries for Linux, MacOS, or Windows from the &lt;a href="https://github.com/konveyor/move2kube/releases">list of releases on Github&lt;/a>. Follow the steps below to install the latest stable version.&lt;/p>
&lt;p>&lt;strong>Procedure&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>Install Move2Kube with one of the following options.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Latest stable version:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>bash &amp;lt;(curl https://raw.githubusercontent.com/konveyor/move2kube/main/scripts/install.sh)
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>A specific version (for example version v0.3.0-beta.0):&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>MOVE2KUBE_TAG=&amp;#39;v0.3.0-beta.0&amp;#39; bash &amp;lt;(curl https://raw.githubusercontent.com/konveyor/move2kube/main/scripts/install.sh)
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Bleeding edge version:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>BLEEDING_EDGE=&amp;#39;true&amp;#39; bash &amp;lt;(curl https://raw.githubusercontent.com/konveyor/move2kube/main/scripts/install.sh)
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Without sudo:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>USE_SUDO=false bash &amp;lt;(curl https://raw.githubusercontent.com/konveyor/move2kube/main/scripts/install.sh)
&lt;/code>&lt;/pre>&lt;ol start="2">
&lt;li>Consider setting the following options.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>The script installs to /usr/local/bin by default. To install to a different directory:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>MOVE2KUBE_INSTALL_DIR=/my/new/install/dir bash &amp;lt;(curl https://raw.githubusercontent.com/konveyor/move2kube/main/scripts/install.sh)
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Make the installation directory in the PATH to run Move2Kube as move2kube instead of /my/new/install/dir/move2kube.&lt;/li>
&lt;li>Combine the above two environment variables to install without sudo and install to a different directory.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>USE_SUDO=false MOVE2KUBE_INSTALL_DIR=/my/new/install/dir bash &amp;lt;(curl https://raw.githubusercontent.com/konveyor/move2kube/main/scripts/install.sh)
&lt;/code>&lt;/pre>&lt;h3 id="alternate-installations">Alternate installations&lt;/h3>
&lt;p>Move2Kube can be installed using Homebrew and Go.&lt;/p></description></item><item><title>A Method to Measure and Manage Technical Debt</title><link>http://konveyor.io/blog/2022/measure-manage-technical-debt/</link><pubDate>Thu, 07 Jul 2022 07:00:00 +0000</pubDate><guid>http://konveyor.io/blog/2022/measure-manage-technical-debt/</guid><description>&lt;p>As a software developer, technical debt is all those little things that you feel are hampering the efficiency of your coding. These are the issues that you (or your manager) choose to handle next time, because of the urgency of the current release. But sometimes, by the time you get to them, they have become so big you do not know where to start solving them. The difficult part is that decisions we make regarding technical debt have to balance between short term and long term implications of accumulating such debt, emphasizing the need to properly assess and address it when planning development cycles.&lt;/p></description></item><item><title>Administrator view tasks</title><link>http://konveyor.io/docs/konveyor/admintasks/</link><pubDate>Tue, 28 Jun 2022 15:16:01 -0600</pubDate><guid>http://konveyor.io/docs/konveyor/admintasks/</guid><description>&lt;p>The administrator view is intended to be used by administrators to set up the Tackle instance environment.
&lt;img src="http://konveyor.io/Tackle2/Views/AdminMenu.png" alt="">&lt;/p>
&lt;h2 id="credentials">Credentials&lt;/h2>
&lt;p>This management module enables administrators to create and manage credentials for access to private repositories. It also allows for the architects to assign the credentials to applications without knowing their contents. Key credential attributes to have before starting the procedure include:&lt;/p>
&lt;ul>
&lt;li>Name&lt;/li>
&lt;li>Description (optional)&lt;/li>
&lt;li>Type (Souce control, Maven settings file, Proxy)&lt;/li>
&lt;li>Created by&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>Important&lt;/strong> There are three types of credentials. Follow the procedure below for the type being configured.&lt;/p></description></item><item><title>Tackle 2: New capabilities for modernizing applications to leverage Kubernetes</title><link>http://konveyor.io/blog/2022/tackle-2-new-capabilities/</link><pubDate>Thu, 16 Jun 2022 07:00:00 +0000</pubDate><guid>http://konveyor.io/blog/2022/tackle-2-new-capabilities/</guid><description>&lt;p>By Ramón Román Nissen&lt;/p>
&lt;p>We’re thrilled to announce that Tackle 2.0 is now available in &lt;a href="https://operatorhub.io/">operatorhub.io&lt;/a>. This new release marks a major milestone for the Tackle project, with a new architecture focused on enhancing performance, scalability and more importantly, extensibility of the tooling available in the Tackle toolkit.&lt;/p>
&lt;p>This version includes the seamless integration with the analysis capabilities of the Windup project, enabling Tackle to effectively manage, assess and now also analyze applications to have a holistic view at your portfolio when dealing with large scale modernization and Kubernetes adoption initiatives. This is essential to provide key insights that allow Architects leading these massive projects to make informed decisions, thus reducing risks and making the required effort measurable and predictable.&lt;/p></description></item><item><title>Views</title><link>http://konveyor.io/docs/konveyor/views/</link><pubDate>Tue, 14 Jun 2022 14:59:53 -0600</pubDate><guid>http://konveyor.io/docs/konveyor/views/</guid><description>&lt;p>The latest version of Tackle has the Developers view and the new Architects view to support the three main roles of users:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Administrators:&lt;/strong> Has access to some application-wide configuration parameters that other users can consume but not change or browse.&lt;/p>
&lt;p>Example actions: Define Git credentials, Maven settings, .xml files.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Architects:&lt;/strong> Often the technical leads for the migration project that can create and modify applications and information related to it. The Architects do not need to have access to sensitive information, but can consume it.&lt;/p></description></item><item><title>Seeding Instances</title><link>http://konveyor.io/docs/konveyor/instances/</link><pubDate>Tue, 14 Jun 2022 14:59:46 -0600</pubDate><guid>http://konveyor.io/docs/konveyor/instances/</guid><description>&lt;p>Tackle instances have key parameters that are configured in the Controls window prior to migration by the project architect and can be added and edited as needed.&lt;br>
&lt;img src="http://konveyor.io/Tackle2/Instances/ControlsMain.png" alt="">
These parameters define applications and individuals, teams, verticals or areas within an organization affected or participating in the migration.&lt;/p>
&lt;ul>
&lt;li>Stakeholders&lt;/li>
&lt;li>Stakeholder groups&lt;/li>
&lt;li>Job functions&lt;/li>
&lt;li>Business services&lt;/li>
&lt;li>Tag types&lt;/li>
&lt;li>Tags&lt;/li>
&lt;/ul>
&lt;h2 id="seeding-tackle-instance">Seeding Tackle instance&lt;/h2>
&lt;p>The steps to creating and configuring a Tackle instance can be performed in any order, but the suggested order below is the most efficient for creating stakeholders and tags.&lt;/p></description></item><item><title>Installing Konveyor</title><link>http://konveyor.io/docs/konveyor/installation/</link><pubDate>Tue, 14 Jun 2022 14:59:30 -0600</pubDate><guid>http://konveyor.io/docs/konveyor/installation/</guid><description>&lt;p>Follow the steps below to provision the minikube cluster and install Konveyor.&lt;/p>
&lt;h2 id="provisioning-minikube">Provisioning Minikube&lt;/h2>
&lt;p>Follow the steps below to provision minikube for single users deploying Konveyor on a workstation. These steps will configure minikube and enable:&lt;/p>
&lt;ul>
&lt;li>Ingress so the Konveyor tool can publish outside of the Kubernetes cluster.&lt;/li>
&lt;li>Operator lifecycle manager (OLM) addon.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Procedure&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>Provision the minikube cluster with these recommended parameters. Replace &lt;code>&amp;lt;profile name&amp;gt;&lt;/code> with your choice of minikube profile name.&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>[user@user ~]$ minikube start --memory=10g -p &amp;lt;profile name&amp;gt;
&lt;/code>&lt;/pre>&lt;ol start="2">
&lt;li>Enable the ingress addon.&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>[user@user ~]$ minikube addons enable ingress -p &amp;lt;profile name&amp;gt;
&lt;/code>&lt;/pre>&lt;ol start="3">
&lt;li>Install Operator Lifecycle Manager (OLM), a tool to help manage the Operators running on your cluster.&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>curl -sL https://github.com/operator-framework/operator-lifecycle-manager/releases/download/v0.25.0/install.sh | bash -s v0.25.0
&lt;/code>&lt;/pre>&lt;h2 id="installing-konveyor-operator">Installing Konveyor Operator&lt;/h2>
&lt;p>Operators are a structural layer that manages resources deployed on Kubernetes (database, front end, back end) to automatically create a Konveyor instance instead of doing it manually.&lt;/p></description></item><item><title>Assessing and analyzing applications</title><link>http://konveyor.io/docs/konveyor/assessanalyze/</link><pubDate>Tue, 14 Jun 2022 14:59:11 -0600</pubDate><guid>http://konveyor.io/docs/konveyor/assessanalyze/</guid><description>&lt;p>Tackle core functions are assessing and analyzing the applications for migration and are performed on the Application inventory page.
&lt;img src="http://konveyor.io/Tackle2/AppAssessAnalyze/ApplicationInventory.png" alt="">&lt;/p>
&lt;h2 id="assessing-applications">Assessing applications&lt;/h2>
&lt;p>Follow the steps below to facilitate discussion of application migration.&lt;/p>
&lt;p>&lt;strong>Procedure&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>Click &lt;strong>Application inventory&lt;/strong> in the left menu in the &lt;strong>Development&lt;/strong> view.
&lt;img src="http://konveyor.io/Tackle2/AppAssessAnalyze/AnalysisSelect.png" alt="">&lt;/li>
&lt;li>Click the checkbox to the left of the application being assessed.&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Note:&lt;/strong> Only one application can be assessed at a time.&lt;/p>
&lt;ol start="3">
&lt;li>Click the &lt;strong>Assess&lt;/strong> button.
&lt;img src="http://konveyor.io/Tackle2/AppAssessAnalyze/AssessDetails.png" alt="">&lt;/li>
&lt;li>Select the &lt;strong>Stakeholders&lt;/strong> and &lt;strong>Stakeholder groups&lt;/strong> from the drop-down lists to track who contributed to the assessment for future reference.&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Note:&lt;/strong> Additional list options can be added in the Stakeholder Groups or Stakeholders tab on the Controls page in the Developer view.&lt;/p></description></item><item><title>Adding applications</title><link>http://konveyor.io/docs/konveyor/addapps/</link><pubDate>Tue, 14 Jun 2022 14:58:52 -0600</pubDate><guid>http://konveyor.io/docs/konveyor/addapps/</guid><description>&lt;p>Applications can be added to Tackle by creating new applications from scratch manually or by importing them.
&lt;img src="http://konveyor.io/Tackle2/AddingApps/NewAppBasic.png" alt="">
Tackle applications are defined by manually entered and pre-defined attributes:&lt;/p>
&lt;ul>
&lt;li>Name (manual)&lt;/li>
&lt;li>Description (manual)&lt;/li>
&lt;li>Business service (pre-defined)&lt;/li>
&lt;li>Tags (pre-defined)&lt;/li>
&lt;li>Source code&lt;/li>
&lt;li>Binary&lt;/li>
&lt;/ul>
&lt;h2 id="creating-a-new-application">Creating a new application&lt;/h2>
&lt;p>Follow the steps below to add a new application to the inventory for assessment and analysis.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> Before starting this procedure, it is helpful to set up business services, check tags and tag types, and create additions as needed.&lt;/p></description></item><item><title>Application Modernization Report Shows Need For Kubernetes-specific Migration Tooling</title><link>http://konveyor.io/blog/2022/application-modernization-report/</link><pubDate>Wed, 09 Mar 2022 07:00:00 +0000</pubDate><guid>http://konveyor.io/blog/2022/application-modernization-report/</guid><description>&lt;p>Konveyor is a community of people passionate about helping others modernize and migrate their applications to the hybrid cloud by building tools, identifying patterns, and providing advice on how to break down monoliths, adopt containers, and embrace Kubernetes. To do so the Konveyor community is currently working on five projects to help users rehost, replatform, and refactor their applications to Kubernetes.&lt;/p>
&lt;p>While conversations with users and data from various sources gave us some visibility into how migrations were taking place, we wanted to inform our priorities with recent detailed data. To do so, Red Hat, a Konveyor community contributor, sponsored a survey of 600 IT decision makers, backend developers, and software architects in the US, UK, and English-speaking Asia-Pacific (APAC) to better understand the application modernization landscape.&lt;/p></description></item><item><title>Konveyor Community HackFest</title><link>http://konveyor.io/blog/2021/konveyor-community-hackfest/</link><pubDate>Tue, 21 Dec 2021 07:00:00 +0000</pubDate><guid>http://konveyor.io/blog/2021/konveyor-community-hackfest/</guid><description>&lt;p>&lt;strong>January 31–February 4, 2022. 9 a.m.–5 p.m. EST each day&lt;/strong>&lt;/p>
&lt;p>Get free hands-on experience migrating different workload types to Kubernetes with open source tools and community engineer support. &lt;a href="https://docs.google.com/forms/d/1DGM5x8x4UyFAUQPkrJoVicnVWmovPbRqumLeotHtugI/edit?ts=61a8ce49">Register to get the calendar invite&lt;/a>.&lt;/p>
&lt;p>The Konveyor community has developed multiple use cases for you to learn time- and cost-efficient ways to migrate to Kubernetes. During this HackFest, if something is missing, not working as expected, or you simply get stuck — you can open a GitHub issue or get support from the community engineers.&lt;/p></description></item><item><title>Exploring a Metrics-Driven Approach to Transformation</title><link>http://konveyor.io/blog/2021/metrics-driven-approach-to-transformation/</link><pubDate>Wed, 03 Mar 2021 07:00:00 +0000</pubDate><guid>http://konveyor.io/blog/2021/metrics-driven-approach-to-transformation/</guid><description>&lt;p>My team has been working with organizations adopting containers, Kubernetes, and Red Hat OpenShift for more than three years now. When we started providing professional services around enterprise Kubernetes, it became clear we needed a program-level framework for adopting containers that spelled out the activities of multiple project teams. Some participants would be focused on container platform management and operations, some on continuous delivery, some on the application lifecycle, and others on cross-cutting process transformation.&lt;/p></description></item><item><title>Migrating Faster with Direct Migration</title><link>http://konveyor.io/blog/2021/direct-migration/</link><pubDate>Wed, 24 Feb 2021 07:00:00 +0000</pubDate><guid>http://konveyor.io/blog/2021/direct-migration/</guid><description>&lt;p>In MTC 1.4.0, a new feature called Direct Migration is available that will yield significant time savings for most customers migrating persistent volumes and/or internal images. Direct Migration enables the migration of persistent volumes and internal images directly from the source cluster to the destination cluster without an intermediary replication repository. This introduces a significant performance enhancement while also providing better error and progress reporting information back to the end-user.&lt;/p></description></item><item><title>Kantra, Konveyor Command-Line-Interface (CLI)</title><link>http://konveyor.io/components/konveyor-cli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://konveyor.io/components/konveyor-cli/</guid><description/></item><item><title>Konveyor AI (Kai)</title><link>http://konveyor.io/components/kai/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://konveyor.io/components/kai/</guid><description/></item><item><title>Konveyor Hub</title><link>http://konveyor.io/components/konveyor-hub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://konveyor.io/components/konveyor-hub/</guid><description/></item><item><title>Privacy Statement for the Konveyor Community</title><link>http://konveyor.io/privacy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://konveyor.io/privacy/</guid><description>&lt;h2 id="scope-of-this-notice">Scope of This Notice&lt;/h2>
&lt;p>This Privacy Statement is intended to describe the Konveyor Project’s privacy practices and provide information about the choices you have regarding the ways in which information collected by the Konveyor Project is used and disclosed. For convenience, the Konveyor Project is referred to in this document as “Konveyor”.&lt;/p>
&lt;h2 id="our-commitment-to-privacy">Our Commitment to Privacy&lt;/h2>
&lt;p>At Konveyor, your privacy is important to us. To better protect your privacy, we have provided this Statement explaining our information practices and the choices you can make about the way your personal information is collected, used and disclosed. To make this Statement easy to find, we have made it available on our homepage and at every location where personally-identifiable information may be requested.&lt;/p></description></item><item><title>The Konveyor Ecosystem</title><link>http://konveyor.io/ecosystem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://konveyor.io/ecosystem/</guid><description/></item></channel></rss>